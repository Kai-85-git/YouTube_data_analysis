import { GoogleGenerativeAI } from '@google/generative-ai';
import { config } from '../config/config.js';
import { YouTubeAnalyzerError } from '../utils/errors.js';

export class GeminiCommentAnalyzer {
  constructor() {
    this.genAI = new GoogleGenerativeAI(config.gemini.apiKey);
    this.model = this.genAI.getGenerativeModel({ model: config.gemini.model });
  }

  async analyzeVideoComments(comments, videoTitle) {
    try {
      // Prepare comments for Gemini analysis
      const commentTexts = comments.map(comment => {
        const snippet = comment.snippet.topLevelComment.snippet;
        return {
          text: snippet.textDisplay,
          author: snippet.authorDisplayName,
          likeCount: snippet.likeCount || 0,
          publishedAt: snippet.publishedAt
        };
      });

      // Sort by likes to get most relevant comments
      const sortedComments = commentTexts.sort((a, b) => b.likeCount - a.likeCount);
      const topComments = sortedComments.slice(0, 30); // Limit to top 30 for API

      const prompt = `
YouTube„ÅÆÂãïÁîª„Äå${videoTitle}„Äç„ÅÆ„Ç≥„É°„É≥„Éà„ÇíÂàÜÊûê„Åó„Å¶„ÄÅ‰ª•‰∏ã„ÅÆ3„Å§„ÅÆ„Ç´„ÉÜ„Ç¥„É™„Éº„Å´ÂàÜÈ°û„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

„ÄêÂàÜÊûêÂØæË±°„Ç≥„É°„É≥„Éà„Äë
${topComments.map(c => `${c.text} (üëç${c.likeCount})`).join('\n')}

‰ª•‰∏ã„ÅÆÂü∫Ê∫ñ„ÅßÂàÜÈ°û„Åó„ÄÅÂêÑ„Ç´„ÉÜ„Ç¥„É™„Éº„Åã„ÇâÊúÄ„ÇÇ‰ª£Ë°®ÁöÑ„Å™„Ç≥„É°„É≥„Éà„Çí10ÂÄã„Åö„Å§ÈÅ∏„Çì„Åß„Åè„Å†„Åï„ÅÑÔºö

1. **‰∫∫Ê∞ó„Ç≥„É°„É≥„Éà**: „ÅÑ„ÅÑ„Å≠Êï∞„ÅåÂ§ö„Åè„ÄÅÂ§ö„Åè„ÅÆË¶ñËÅ¥ËÄÖ„Å´ÂÖ±ÊÑü„Åï„Çå„Å¶„ÅÑ„Çã„Ç≥„É°„É≥„Éà
2. **Âª∫Ë®≠ÁöÑ„Å™„Ç≥„É°„É≥„Éà**: ÂãïÁîª„Å´ÂØæ„Åô„ÇãÂÖ∑‰ΩìÁöÑ„Å™Ë≥ûË≥õ„ÄÅÊÑüË¨ù„ÄÅÂ≠¶„Å≥„Å™„Å©„Éù„Ç∏„ÉÜ„Ç£„Éñ„Å™‰æ°ÂÄ§„ÇíÂê´„ÇÄ„Ç≥„É°„É≥„Éà
3. **ÊîπÂñÑÊèêÊ°à„Ç≥„É°„É≥„Éà**: Âª∫Ë®≠ÁöÑ„Å™ÊâπÂà§„ÄÅÊîπÂñÑÊ°à„ÄÅ„É™„ÇØ„Ç®„Çπ„Éà„Å™„Å©‰ªäÂæå„ÅÆÂãïÁîªÂà∂‰Ωú„Å´ÂΩπÁ´ã„Å§„Ç≥„É°„É≥„Éà

‰ª•‰∏ã„ÅÆJSONÂΩ¢Âºè„ÅßÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
{
  "topComments": [
    {
      "text": "„Ç≥„É°„É≥„ÉàÂÜÖÂÆπ",
      "likeCount": „ÅÑ„ÅÑ„Å≠Êï∞,
      "reason": "ÈÅ∏Âá∫ÁêÜÁî±"
    }
  ],
  "constructiveComments": [
    {
      "text": "„Ç≥„É°„É≥„ÉàÂÜÖÂÆπ",
      "likeCount": „ÅÑ„ÅÑ„Å≠Êï∞,
      "reason": "ÈÅ∏Âá∫ÁêÜÁî±"
    }
  ],
  "improvementComments": [
    {
      "text": "„Ç≥„É°„É≥„ÉàÂÜÖÂÆπ",
      "likeCount": „ÅÑ„ÅÑ„Å≠Êï∞,
      "reason": "ÈÅ∏Âá∫ÁêÜÁî±"
    }
  ],
  "summary": {
    "overallSentiment": "ÂÖ®‰ΩìÁöÑ„Å™ÊÑüÊÉÖÔºà„Éù„Ç∏„ÉÜ„Ç£„Éñ/„Éç„Ç¨„ÉÜ„Ç£„Éñ/‰∏≠Á´ãÔºâ",
    "keyThemes": ["‰∏ªË¶Å„Å™„ÉÜ„Éº„Éû1", "‰∏ªË¶Å„Å™„ÉÜ„Éº„Éû2", "‰∏ªË¶Å„Å™„ÉÜ„Éº„Éû3"],
    "audienceInsights": "Ë¶ñËÅ¥ËÄÖÂ±§„Å´Èñ¢„Åô„ÇãÊ¥ûÂØü"
  }
}`;

      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();
      
      // Extract JSON from response
      let analysisData;
      try {
        const jsonMatch = text.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          analysisData = JSON.parse(jsonMatch[0]);
        } else {
          throw new Error('No JSON found in response');
        }
      } catch (parseError) {
        console.error('Failed to parse Gemini response:', text);
        throw new YouTubeAnalyzerError('Failed to parse AI response', null);
      }

      // Format the response with original comment data
      const formatComments = (aiComments, originalComments) => {
        return aiComments.map(aiComment => {
          const original = originalComments.find(c => 
            c.text.includes(aiComment.text.substring(0, 20)) || 
            aiComment.text.includes(c.text.substring(0, 20))
          );
          
          if (original) {
            return {
              text: original.text,
              author: original.author,
              likeCount: original.likeCount,
              publishedAt: original.publishedAt,
              category: aiComment.category || 'analyzed',
              reason: aiComment.reason
            };
          }
          
          return {
            text: aiComment.text,
            likeCount: aiComment.likeCount || 0,
            category: aiComment.category || 'analyzed',
            reason: aiComment.reason
          };
        });
      };

      // Calculate statistics
      const statistics = {
        totalComments: comments.length,
        averageLikes: Math.round(commentTexts.reduce((sum, c) => sum + c.likeCount, 0) / commentTexts.length * 10) / 10,
        maxLikes: Math.max(...commentTexts.map(c => c.likeCount)),
        totalLikes: commentTexts.reduce((sum, c) => sum + c.likeCount, 0)
      };

      return {
        topComments: formatComments(analysisData.topComments || [], commentTexts),
        constructiveComments: formatComments(analysisData.constructiveComments || [], commentTexts),
        improvementComments: formatComments(analysisData.improvementComments || [], commentTexts),
        statistics,
        summary: analysisData.summary || {
          overallSentiment: '„Éù„Ç∏„ÉÜ„Ç£„Éñ',
          keyThemes: [],
          audienceInsights: ''
        }
      };

    } catch (error) {
      console.error('Gemini comment analysis error:', error);
      throw new YouTubeAnalyzerError(`Failed to analyze comments with AI: ${error.message}`, null);
    }
  }
}